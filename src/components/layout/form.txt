import React, { useState } from "react";
import "../css/useForm.css";
import { useForm } from "react-hook-form";
import axios from "axios";
import { Bounce, toast, ToastContainer } from "react-toastify";

const UserForm = () => {

//------------------------first--------------------------------------------

  const { register, handleSubmit, formState: { errors } } = useForm()

  const submithandler = async (data) => {
    console.log("Before Formatting:", data);


    const userData = JSON.parse(localStorage.getItem("user"));
    const userId = userData.data;

    if (!userData) {
      toast.error("User ID not found. Please log in again.");
      return;
    }

    const formattedData = {
      ...data,
      userId: userId,
    };

    console.log(formattedData)

    try {
      const res = await axios.post("/form/addinfo", formattedData)
      console.log("sucess:", res.data)

      if (res.status === 200) {
        toast.success('Details added Sucessfully', {
          position: "top-center",
          autoClose: 3000,
          hideProgressBar: false,
          closeOnClick: false,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
          transition: Bounce,
        });

      } else {
        toast.success('Something Error', {
          position: "top-center",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: false,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
          transition: Bounce,
        });
      }

    } catch (error) {
      toast.success('Something Error', {
        position: "top-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: false,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "colored",
        transition: Bounce,
      });
      console.error("erroe:", error)
    }
  }



  const [activeTab, setActiveTab] = useState("Personal");

  const nextStep = () => {
    setTimeout(() => {
      if (activeTab === "Personal") {
        setActiveTab("Education");
      } else if (activeTab === "Education") {
        setActiveTab("Experience");
      } else if (activeTab === "Experience") {
        setActiveTab("Skills");
      }
    }, 50);
  };

  const prevStep = () => {
    setTimeout(() => {
      if (activeTab === "Skills") {
        setActiveTab("Experience");
      } else if (activeTab === "Experience") {
        setActiveTab("Education");
      } else if (activeTab === "Education") {
        setActiveTab("Personal");
      }
    }, 50);
  };


  //validarionSchmea

  const validationSchema = {
    fullNameValidation:{
        required:{
          value: true,
          message: "*Full Name is required"
        }
    },

    emailValidator: {
        required:{
            value: true,
            message:"*Email is required"
        },
        pattern:{
            value:/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
            message:"Invalid Email Address"
        }
    },

    phoneValidator: {
        required:{
            value: true,
            message:"*Phone Number is required"
        },
        pattern:{
            value:/^\+?\d{1,3}?[-.\s]?\(?\d{1,3}?\)?[-.\s]?\d{1,4}[-.\s]?\d{4}$/,
            message:"Invalid Phone Number"
        }
    },

    birthDateValidator:{
      required:{
        value: true,
        message: "*Birth Date is required"
      }
    },

    language:{
      required:{
        value: true,
        message: "*Language is required"
      }
    }

    


  }//end of validationSchema

  

  return (
    <>
      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick={false}
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
        transition={Bounce}
      />
      <div className="resume-container">
        <h2>Create Your Resume</h2>
        <p>Fill in your details to generate your professional resume</p>

        {/* Tabs Section */}
        <div className="tabs">
          {["Personal", "Education", "Experience", "Skills"].map((tab) => (
            <button
              key={tab}
              className={activeTab === tab ? "tab active" : "tab"}
              onClick={() => setActiveTab(tab)}
            >
              {tab}
            </button>
          ))}
        </div>

        {/* Form Section - Dynamic Based on Tab */}
        <form className="resume-form" onSubmit={handleSubmit(submithandler)} >
          {activeTab === "Personal" && (
            <>
              <div className="form-group">
                <label>Full Name</label>
                <input type="text" placeholder="Badal Patel" {...register("personal_info.fullName",validationSchema.fullNameValidation)} />
                <span style={{color:'red'}}>
                  {
                   errors.personal_info?.fullName?.message
                  }
                </span>
              </div>

              <div className="form-group">
                <label>Email</label>
                <input type="email" placeholder="badal@example.com"  {...register("personal_info.email",validationSchema.emailValidator)} />
                <span style={{color:'red'}}>
                  {
                   errors.personal_info?.phone?.message
                  }
                </span>
              </div>

              <div className="form-group">
                <label>Phone</label>
                <input type="tel" placeholder="+1 234 567 890"  {...register("personal_info.phone",validationSchema.phoneValidator)} />
                <span style={{color:'red'}}>
                  {
                    errors.personal_info?.phone && errors.personal_info.phone
                  }
                </span>
              </div>

              <div className="form-group">
                <label>Date of Birth</label>
                <input type="string" placeholder="01 Jan 2000"  {...register("personal_info.birthDate",validationSchema.birthDateValidator)} />
                <span style={{color:'red'}}>
                  {
                    errors.personal_info?.birthDate && errors.personal_info.birthDate.message
                  }
                </span>
              </div>

              <div className="form-group full-width">
                <label>Address</label>
                <textarea placeholder="Your address"   {...register("personal_info.address")}></textarea>
              </div>
            </>
          )}

          {activeTab === "Education" && (
            <>
              <div className="form-group">
                <label>Degree</label>
                <input type="text" placeholder="B.E in Computer Engineering"  {...register("education.degree")} />
              </div>

              <div className="form-group">
                <label>University</label>
                <input type="text" placeholder="GTU" {...register("education.university")} />
              </div>

              <div className="form-group">
                <label>Year of Graduation</label>
                <input type="number" placeholder="2025" {...register("education.year_of_passing")} />
              </div>
            </>
          )}

          {activeTab === "Experience" && (
            <>
              <div className="form-group">
                <label>Job Title</label>
                <input type="text" placeholder="Software Engineer / Intern" {...register("experience.job_title")} />
              </div>

              <div className="form-group">
                <label>Company</label>
                <input type="text" placeholder="Google" {...register("experience.company_name")} />
              </div>

              <div className="form-group">
                <label>Years of Experience</label>
                <input type="number" placeholder="3" {...register("experience.duration")} />
              </div>

              <div className="form-group">
                <label>Project Title</label>
                <input type="string" placeholder="Resume Builder" {...register("projects.title")} />
              </div>

              <div className="form-group full-width">
                <label>Project Summary</label>
                <textarea placeholder="Describe your project..."></textarea>
              </div>
            </>
          )}

          {activeTab === "Skills" && (
            <>
              <div className="form-group">
                <label>Technical Skills</label>
                <input type="text" placeholder="React, Node.js, Python" {...register("skills.technical_skills")} />
              </div>

              <div className="form-group">
                <label>Soft Skills</label>
                <input type="text" placeholder="Communication, Teamwork" {...register("skills.soft_skills")} />
              </div>

              <div className="form-group">
                <label>Languages</label>
                <input type="text" placeholder="English, Hindi, Gujarati" {...register("language")} />
              </div>

              <div className="form-group">
                <label>Interests</label>
                <input type="text" placeholder="Reading, Traveling, Singing"{...register("interests")} />
              </div>
            </>
          )}

          {/* Navigation Buttons */}
          <div className="form-buttons">
            {activeTab !== "Personal" && (
              <button type="button" className="prev-btn" onClick={prevStep}>
                Previous
              </button>
            )}
            {activeTab === "Skills" ? (
              <button type="submit" className="next-btn">
                Submit
              </button>
            ) : (
              <button type="button" className="next-btn" onClick={nextStep}>
                Next
              </button>
            )}
          </div>
        </form>
      </div>
    </>

  );
};

export default UserForm;







/* 🔹 General Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Arial", sans-serif;
}

body {
  background-color: #0f0f0f;
  color: #e0e0e0;
  overflow-x: hidden;
}

/* 🔹 Admin Layout */
.admin-container {
  display: flex;
  height: 100vh;
  width: 100vw;
}

/* 🔹 Sidebar (Fixed Width) */
.admin-container {
  display: flex;
  min-height: 100vh;
  background-color: #0f0f0f;
}

/* Sidebar */
.admin-sidebar {
  width: 250px;
  background: linear-gradient(to bottom, #121212, #1a1a1a);
  padding: 30px 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  border-right: 2px solid #ff1493;
  box-shadow: 4px 0 12px rgba(255, 20, 147, 0.3);
  position: sticky;
  top: 0;
}

/* Profile */
.admin-profile {
  text-align: center;
  margin-bottom: 30px;
}

.admin-avatar {
  width: 70px;
  height: 70px;
  border-radius: 50%;
  background-color: transparent;
  border: 2px solid #ff1493;
  margin: 0 auto 10px;
}

.admin-username {
  font-size: 18px;
  font-weight: bold;
  color: #ff66cc;
}

.admin-role {
  font-size: 13px;
  color: #bbb;
}

/* Add Button */
.admin-add-template {
  background-color: #ff1493;
  color: white;
  border: none;
  padding: 10px 14px;
  margin: 20px 0;
  border-radius: 8px;
  cursor: pointer;
  width: 100%;
  font-weight: 600;
  box-shadow: 0 0 12px #ff1493;
  transition: all 0.3s ease-in-out;
}

.admin-add-template:hover {
  transform: scale(1.03);
  box-shadow: 0 0 16px #ff1493;
}

/* Menu */
.admin-menu {
  width: 100%;
}

.admin-menu-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.admin-menu-item {
  padding: 12px 15px;
  margin: 6px 0;
  border-radius: 6px;
  text-align: center;
  display: block;
  color: #ddd;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s;
}

.admin-menu-item:hover {
  background-color: #ff1493;
  color: #fff;
  box-shadow: 0 0 10px #ff1493;
}

.admin-active {
  background-color: #ff1493;
  color: #fff;
  font-weight: 600;
  box-shadow: 0 0 10px #ff1493;
}


/* 🔹 Main Content */
.admin-main {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  width: calc(100vw - 250px);
}

/* 🔹 Dashboard Cards */
.admin-stats {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.admin-card {
  background-color: #1e1e1e;
  padding: 20px;
  border-radius: 12px;
  flex: 1;
  text-align: center;
  min-width: 250px;
  box-shadow: 0 0 10px rgba(255, 20, 147, 0.2);
}

.admin-card-title {
  margin: 10px 0;
  color: #ff66cc;
}

.admin-card-number {
  font-size: 24px;
  font-weight: bold;
  color: #e0e0e0;
}

.admin-card-info {
  font-size: 12px;
  color: #c0c0c0;
}

.admin-icon {
  font-size: 24px;
  color: #ff1493;
}

/* 🔹 Add Template Page */
.addtemp-container {
  width: calc(100vw - 250px);
  height: 100vh;
  background-color: #121212;
  color: #e0e0e0;
  padding: 30px;
  display: flex;
  flex-direction: column;
}

.addtemp-title {
  font-size: 28px;
  font-weight: bold;
  color: #ff66cc;
  text-shadow: 0 0 6px #ff1493;
}

.addtemp-subtitle {
  font-size: 16px;
  color: #c0c0c0;
  margin-bottom: 20px;
}

.addtemp-form {
  background: #1a1a1a;
  padding: 20px;
  border-radius: 8px;
  width: 100%;
  flex: 1;
  display: flex;
  flex-direction: column;
  box-shadow: 0 0 10px rgba(255, 105, 180, 0.1);
}

.addtemp-section-title {
  font-size: 20px;
  color: #ff66cc;
  margin-bottom: 10px;
}

.addtemp-section-desc {
  font-size: 14px;
  color: #bbb;
  margin-bottom: 20px;
}

.addtemp-form-group {
  margin-bottom: 15px;
}

.addtemp-label {
  font-size: 14px;
  color: #ccc;
  display: block;
  margin-bottom: 5px;
}

.addtemp-input,
.addtemp-textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #444;
  background-color: #2a2a2a;
  color: #fff;
  border-radius: 5px;
}

.addtemp-textarea {
  min-height: 100px;
  resize: none;
}

.addtemp-thumbnail-section {
  text-align: center;
  margin-top: 20px;
}

.addtemp-preview-img {
  width: 100%;
  max-width: 200px;
  height: auto;
  border-radius: 5px;
  object-fit: cover;
  margin-top: 10px;
  border: 2px solid #ff66cc;
}

.addtemp-thumbnail-placeholder {
  width: 150px;
  height: 200px;
  background-color: #555;
  display: inline-block;
  margin-bottom: 10px;
  border-radius: 5px;
}

.addtemp-upload-button {
  background-color: #ff1493;
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
  border-radius: 5px;
  box-shadow: 0 0 8px #ff1493;
}

.addtemp-image-size-info {
  font-size: 12px;
  color: #aaa;
  margin-top: 5px;
}

/* 🔹 Submit Button */
.addtemp-submit-button {
  width: 100%;
  background-color: #ff1493;
  color: white;
  border: none;
  padding: 12px;
  font-size: 16px;
  cursor: pointer;
  border-radius: 5px;
  margin-top: 20px;
  transition: 0.3s ease-in-out;
  box-shadow: 0 0 10px #ff1493;
}

.addtemp-submit-button:hover {
  background-color: #e60073;
}

/*recent activity*/
.admin-recent-activity {
  background-color: #111;
  border-radius: 16px;
  box-shadow: 0 0 20px rgba(255, 20, 147, 0.3); /* soft neon pink glow */
  padding: 24px;
  margin-top: 32px;
  color: #eee;
}

.admin-activity-title {
  font-size: 1.6rem;
  font-weight: bold;
  color: #ff1493; /* neon pink */
  margin-bottom: 20px;
  text-shadow: 0 0 10px #ff1493;
}

.admin-activity {
  background-color: #1a1a1a;
  border-radius: 12px;
  padding: 16px 20px;
  margin-bottom: 14px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: background 0.3s ease;
  border: 1px solid rgba(192, 192, 192, 0.2); /* subtle neon silver border */
}

.admin-activity:hover {
  background-color: #2a2a2a;
  box-shadow: 0 0 12px rgba(192, 192, 192, 0.3); /* neon silver hover */
}

.admin-activity-text {
  font-size: 1rem;
  font-weight: 500;
  color: #ddd;
}

.admin-activity-user {
  font-weight: bold;
  color: #ff66cc; /* soft neon pink */
  text-shadow: 0 0 5px #ff66cc;
}

.admin-activity-time {
  color: #c0c0c0; /* neon silver */
  font-size: 0.85rem;
  text-shadow: 0 0 4px #c0c0c0;
}

/*Charts*/
.admin-charts {
  display: flex;
  flex-wrap: wrap; /* mobile-friendly */
  gap: 20px;
  justify-content: center;
  align-items: flex-start;
  margin-top: 20px;
}

.admin-charts > * {
  flex: 1 1 400px; /* Minimum width 400px, responsive */
  max-width: 600px;
}

/* 🔹 Responsive Design */
@media (max-width: 1024px) {
  .admin-stats {
    flex-direction: column;
  }
}

@media (max-width: 768px) {
  .admin-container {
    flex-direction: column;
  }

  .admin-sidebar {
    width: 100%;
    flex-direction: row;
    justify-content: space-around;
    padding: 10px;
  }

  .admin-menu-list {
    display: flex;
    gap: 10px;
  }

  .admin-menu-item {
    padding: 5px 10px;
  }

  .admin-logout {
    width: auto;
  }

  .admin-main,
  .addtemp-container {
    width: 100%;
    padding: 20px;
  }

  .addtemp-form {
    max-width: 100%;
  }
}


@media (max-width: 600px) {
  .admin-activity {
    flex-direction: column;
    align-items: flex-start;
    gap: 6px;
  }

  .admin-activity-time {
    margin-left: 0;
  }
}


